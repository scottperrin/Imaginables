<!-- /templates/product.liquid -->

{% comment %}
Capture the product description and split in to sections and distribute into shortcode includes
{% endcomment %}
{% assign content = product.description %}
{% assign splits = content | split: '[split]' %}
{% for split in splits %}
  {% if split contains '[description]' and split contains '[/description]'  %}
    {% capture description %}{{ split | remove: '[description]' | remove: '[/description]' }}{% endcapture %}
  {% endif %}
  {% if split contains '[hero' %}
    {% capture hero %}{{ split | strip_html }}{% endcapture %}
  {% endif %}
  {% if split contains '[spec' %}
    {% comment %}Strip all the html except for lists{% endcomment %}
    {% assign links = split | replace: '<a', '[link]<a' | replace: '</a>', '</a>[link]' | split: '[link]' %}
    {% assign count = 0 %}
    {% assign link_array = '' %}
    {% for link in links %}
    {% assign count = count | plus: 1 %}
    {% assign modulo = count | modulo: 2 %}
      {% if modulo == 0 %}
        {% assign link_array = link_array | append: link  | append: ',' %}
      {% endif %}
    {% endfor %}
    {% assign links = link_array | split: ',' %}
    {% assign this = split %}
    {% assign count = 0 %}
    {% for link in links %}
      {% assign count = count | plus: 1 %}
      {% assign replacement = '[link-' | append: count | append: ']' %}
      {% assign this = this | replace: link, replacement %}
    {% endfor %}

    {% assign this = this | replace: '<ul>', '[ul]' | replace: '</ul>', '[/ul]' | replace: '<li>', '[li]' | replace: '</li>', '[/li]' | strip_html | replace: '[ul]', '<ul>' | replace: '[/ul]', '</ul>' | replace: '[li]', '<li>' | replace: '[/li]', '</li>' %}

    {% assign link_array = link_array | replace: '"', '*+*' %}
    {% assign links = link_array | split: ',' %}
    {% assign count = 0 %}
    {% for link in links %}
    {% assign count = count | plus: 1 %}
    {% assign replacement = '[link-' | append: count | append: ']' %}
      {% assign this = this | replace: replacement, link %}
    {% endfor %}


    {% capture specs %}
      {{ this }}
    {% endcapture %}

  {% endif %}
  {% if split contains '[technical' %}
    {% capture technical %}{{ split }}{% endcapture %}
  {% endif %}
  {% if split contains '[awards]' and split contains '[/awards]'  %}
    {% capture awards %}{{ split | remove: '[awards]' | remove: '[/awards]' }}{% endcapture %}
  {% endif %}
{% endfor %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  <section class="container color">
    <div class="wrapper">
      <div class="grid grid-uniform text-center">
        <div class="grid__item flex__item large--five-twelfths large--text-right text-center">
          <div class="mini-wrapper">
            {% include 'product-form' %}
          </div>
        </div>
        <div class="product-image-slider grid__item large--seven-twelfths flex__item text-center">
          {% include 'product-image-slider' %}
        </div>
      </div>
    </div>
  </section>

  {% if description != blank %}{% include 'shortcode-description' %}{% endif %}
  {% if specs != blank %}{% include 'product-specs' %}{% endif %}
  {% if hero != blank %}{% include 'shortcode' load: hero %}{% endif %}
  {% if technical != blank %}{%- include 'shortcode' load: technical -%}{% endif %}
  {% include 'product-stories' %}
  {% include 'product-related-products' %}
  {% include 'product-awards' %}

</div>

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {

    // Price
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector,
      slick: true
    });
    // Stock Levels
    if (variant) {
      if (variant.inventory_management == "shopify" && variant.inventory_policy != "continue") {
        if (variant.inventory_quantity > 0) {
          $('#variantInventory').text(variant.inventory_quantity + ' In Stock');
        } else {
          $('#variantInventory').text("Currently Unavailable");
        }
      } else {
        $('#variantInventory').text("This product is available");
      }
    } else {
      $('#variantInventory').text("");
    }
    // SKU
    if (variant) {
      $('#variantSku').text(variant.sku);
    } else {
      $('#variantSku').hide();
    }

    // Swatch
    if (variant) {
      var form = jQuery('#' + selector.domIdPrefix).closest('form');
      for (var i=0,length=variant.options.length; i<length; i++) {
        var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] +'"]');
        if (radioButton.size()) {
          radioButton.get(0).checked = true;
          //console.log(radioButton);
        }
      }
    }

  };
  // Option Selectors
  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });
    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}
    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>
